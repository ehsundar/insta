// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package user

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into "user"
    (username, password)
values ($1, $2)
returning ident
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password)
	var ident int64
	err := row.Scan(&ident)
	return ident, err
}

const getUserByIdent = `-- name: GetUserByIdent :one
select ident, username, password, created_at
from "user"
where ident = $1
limit 1
`

func (q *Queries) GetUserByIdent(ctx context.Context, ident int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByIdent, ident)
	var i User
	err := row.Scan(
		&i.Ident,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select ident, username, password, created_at
from "user"
where username = $1
limit 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.Ident,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
