// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package postgres

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :one
INSERT INTO post (caption, images)
VALUES ($1, $2)
RETURNING ident, caption, images, created_at
`

type CreatePostParams struct {
	Caption string
	Images  []string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Caption, pq.Array(arg.Images))
	var i Post
	err := row.Scan(
		&i.Ident,
		&i.Caption,
		pq.Array(&i.Images),
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into "user"
(username, password)
values ($1, $2)
returning ident
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password)
	var ident int64
	err := row.Scan(&ident)
	return ident, err
}

const deletePost = `-- name: DeletePost :exec
DELETE
FROM post
WHERE ident = $1
`

func (q *Queries) DeletePost(ctx context.Context, ident int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, ident)
	return err
}

const getPost = `-- name: GetPost :one
SELECT ident, caption, images, created_at
FROM post
WHERE ident = $1
LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, ident int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, ident)
	var i Post
	err := row.Scan(
		&i.Ident,
		&i.Caption,
		pq.Array(&i.Images),
		&i.CreatedAt,
	)
	return i, err
}

const getPostAndUser = `-- name: GetPostAndUser :one
select p.ident, p.caption, p.images, p.created_at, "user".ident, "user".username, "user".password, "user".created_at
from (select ident, caption, images, created_at from "post" where post.ident = $1) p
         join "user" on "p".owner = "user".ident
limit 1
`

type GetPostAndUserRow struct {
	Ident       int64
	Caption     string
	Images      []string
	CreatedAt   sql.NullTime
	Ident_2     int64
	Username    string
	Password    string
	CreatedAt_2 sql.NullTime
}

func (q *Queries) GetPostAndUser(ctx context.Context, ident int64) (GetPostAndUserRow, error) {
	row := q.db.QueryRowContext(ctx, getPostAndUser, ident)
	var i GetPostAndUserRow
	err := row.Scan(
		&i.Ident,
		&i.Caption,
		pq.Array(&i.Images),
		&i.CreatedAt,
		&i.Ident_2,
		&i.Username,
		&i.Password,
		&i.CreatedAt_2,
	)
	return i, err
}

const getUserByIdent = `-- name: GetUserByIdent :one
select ident, username, password, created_at
from "user"
where ident = $1
limit 1
`

func (q *Queries) GetUserByIdent(ctx context.Context, ident int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByIdent, ident)
	var i User
	err := row.Scan(
		&i.Ident,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select ident, username, password, created_at
from "user"
where username = $1
limit 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.Ident,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserPosts = `-- name: GetUserPosts :many
SELECT ident, caption, images, created_at
FROM post
ORDER BY created_at
`

func (q *Queries) GetUserPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getUserPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.Ident,
			&i.Caption,
			pq.Array(&i.Images),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPosts = `-- name: ListPosts :many
SELECT ident, caption, images, created_at
FROM post
order by created_at
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.Ident,
			&i.Caption,
			pq.Array(&i.Images),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
